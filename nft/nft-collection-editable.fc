;;
;; NFT collection smart contract
;; Edits: mint on recieving jettons, deploying nft without content
;;

const int deploy_amount = 50000000; ;; 0.05 TON

(slice, slice, int, int, cell, cell) load_data() inline {
  var ds = get_data().begin_parse();
  return 
    (ds~load_msg_addr(), ;; owner_address
     ds~load_msg_addr(), ;; jwallet_address
     ds~load_uint(64), ;; next_item_index
     ds~load_coins(), ;; mint_price
     ds~load_ref(), ;; content
     ds~load_ref() ;; nft_item_code
     );
}

() save_data(slice owner_address, slice jwallet_address, int next_item_index, int mint_price, cell content, cell nft_item_code) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_slice(jwallet_address)
    .store_uint(next_item_index, 64)
    .store_coins(mint_price)
    .store_ref(content)
    .store_ref(nft_item_code)
    .end_cell());
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
  cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
  return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
  return begin_cell().store_uint(4, 3)
                     .store_int(wc, 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, slice owner_address) impure {
  cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
  slice nft_address = calculate_nft_item_address(workchain(), state_init);

  cell body = begin_cell()
                      .store_slice(owner_address)
                     .end_cell();

  var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(body);

  send_raw_message(msg.end_cell(), 1);
}

() recv_internal(int my_balance, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, jwallet_address, next_item_index, mint_price, content, nft_item_code) = load_data();

    if (op == op::transfer_notification) { ;; mint
        throw_unless(800, equal_slices(sender_address, jwallet_address));
        int jetton_amount = in_msg_body~load_coins();
        throw_unless(801, jetton_amount == mint_price);
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(802, my_balance >= deploy_amount * 2); ;; 1st to send, 2nd for storage
        deploy_nft_item(next_item_index, nft_item_code, deploy_amount, from_address);
        next_item_index += 1;
        save_data(owner_address, jwallet_address, next_item_index, mint_price, content, nft_item_code);
        return ();
    }

    throw_unless(401, equal_slices(sender_address, owner_address));

    if (op == 3) { ;; change owner
      slice new_owner = in_msg_body~load_msg_addr();
      save_data(new_owner, jwallet_address, next_item_index, mint_price, content, nft_item_code);
      return ();
    }
    if (op == 4) { ;; change content
      save_data(owner_address, jwallet_address, next_item_index, mint_price, in_msg_body~load_ref(), nft_item_code);
      return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
  var (owner_address, _, next_item_index, _, content, _) = load_data();
  slice cs = content.begin_parse();
  return (next_item_index, cs~load_ref(), owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, _, _, nft_item_code) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
  var (_, _, _, _, content, _) = load_data();
  slice cs = content.begin_parse();
  cs~load_ref();
  slice common_content = cs~load_ref().begin_parse();
  return (begin_cell()
                      .store_uint(1, 8) ;; offchain tag
                      .store_slice(common_content)
                      .store_ref(individual_nft_content)
          .end_cell());
}
